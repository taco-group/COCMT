name: cmt_lidar_late_fusion_pointpillar_v2v4real
root_dir: '/media/re/2384a6b4-4dae-400d-ad72-9b7044491b55/cov2v/v2v4real_small/train'
validate_dir: '/media/re/2384a6b4-4dae-400d-ad72-9b7044491b55/cov2v/v2v4real_small/test'
test_dir: '/media/re/2384a6b4-4dae-400d-ad72-9b7044491b55/cov2v/v2v4real_small/test'

yaml_parser: ["load_point_cloud_params", "load_mmcv_param"]
mmcv_file_path_ptr: ["model.args.CMT_L.mmcv_file_path"]
train_params:
  batch_size: &batch_size 1
  epoches: &epoches 151
  eval_freq: 1
  save_freq: 1
  max_cav: &max_cav 2
  num_classes: &num_classes 2

comm_range: 70
input_source: ['lidar']
label_type: 'lidar'
cav_lidar_range: &cav_lidar [-70.4, -38.4, -5.0, 70.4, 38.4, 3.0]

heter:
  assignment_path: "/media/re/2384a6b4-4dae-400d-ad72-9b7044491b55/RightChoice/COCMT/opencood/modality_assign/v2v4real_4modality.json"
  ego_modality: &ego_modality "m1"
  mapping_dict:
    m1: m1
    m2: m1
    m3: m1
    m4: m1
  modality_setting:
    m1:
      sensor_type: &sensor_type_m1 'lidar'

      # lidar requires preprocess
      preprocess:
        # options: BasePreprocessor, VoxelPreprocessor, BevPreprocessor
        core_method: 'SpVoxelPreprocessor'
        args:
          voxel_size: &voxel_size [0.4, 0.4, 8]
          max_points_per_voxel: 32
          max_voxel_train: 32000
          max_voxel_test: 70000
        # lidar range for each individual cav.
        cav_lidar_range: *cav_lidar


fusion:
  core_method: 'lateheter'
  dataset: 'v2v4real'
  args:
    proj_first: false
    grid_conf: None # place-holder
    data_aug_conf: None # place-holder

data_augment: # no use in intermediate fusion
  - NAME: random_world_flip
    ALONG_AXIS_LIST: [ 'x' ]

  - NAME: random_world_rotation
    WORLD_ROT_ANGLE: [ -0.78539816, 0.78539816 ]

  - NAME: random_world_scaling
    WORLD_SCALE_RANGE: [ 0.95, 1.05 ]

preprocess:
  # options: BasePreprocessor, VoxelPreprocessor, BevPreprocessor
  core_method: 'SpVoxelPreprocessor'
  args:
    voxel_size: [0.4, 0.4, 8] # useful
    max_points_per_voxel: 1 # useless
    max_voxel_train: 1 # useless
    max_voxel_test: 1 # useless
  # lidar range for each individual cav.
  cav_lidar_range: *cav_lidar

# anchor box related
postprocess:
  core_method: 'CMT_VoxelPostprocessor' # VoxelPostprocessor, BevPostprocessor supported
  anchor_free: True
  gt_range: *cav_lidar
  anchor_args:
    cav_lidar_range: *cav_lidar
  target_args:
    score_threshold: 0.20
  order: 'lwh' # hwl or lwh ### align the bbox order to nuscenes
  max_num: 120 # maximum number of objects in a single frame. use this number to make sure different frames has the same dimension in the same batch
  nms_thresh: 0.15

model:
  core_method: 'cmt_lidar'
  args:
    voxel_size: *voxel_size
    pc_range: *cav_lidar
    max_cav: *max_cav

    ### cmt_transformer
    CMT_L:
      mmcv_file_path: "./cmt_lidar_pointpillar_v2v4real.py" # relative to current yaml file

    Lidar_SeperateHead:
      type: 'SeparateTaskHeadandBBoxCoder'
      num_cls: *num_classes
      init_bias: -2.19
      final_kernel: 3
      in_channels: 256
      groups: 6
      common_heads:
        center: [2, 2]
        height: [1, 2]
        dim: [3, 2]
        rot: [2, 2]
      bbox_coder:
        type: 'MultiTaskBBoxCoder'
        post_center_range: *cav_lidar
        pc_range: *cav_lidar
        max_num: 200
        voxel_size: voxel_size
        num_classes: *num_classes
        use_sigmoid: False

loss:
  core_method: cmt_loss
  args:
    loss_cls:
      bg_cls_weight: 0.01
      type: 'CrossEntropyLoss'
      use_sigmoid: False
      loss_weight: 2.0
      class_weight: 1.0
    loss_bbox:
      type: "L1Loss"
      reduction: "mean"
      loss_weight: 0.25
    tasks:
      num_class: 1
      class_names: ['car']
    assigner:
      type: 'HungarianAssigner3D'
      cls_cost:
        type: 'ClassificationCost'
        weight: 2.0
      reg_cost:
        type: 'BBox3DL1Cost'
        weight: 0.25
      iou_cost:
        type: 'IoUCost'
        weight: 0.0 # Fake cost. This is just to make it compatible with DETR head.
      pc_range: *cav_lidar
      code_weights: [2.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 4.0]
    pc_range: *cav_lidar
    code_weights: [2.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 4.0]

optimizer:
  core_method: AdamW
  lr: 2e-4
  args:
    eps: 1e-10
    weight_decay: 1e-2

lr_scheduler:
    core_method: cosineannealwarm #step, multistep, Exponential and cosineannealwarm support
    epoches: *epoches
    warmup_lr: 2e-5
    warmup_epoches: 10
    lr_min: 5e-6